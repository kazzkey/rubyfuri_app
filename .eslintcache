[{"/Users/k.k./workspace/rubyfuri_app/src/reportWebVitals.js":"1","/Users/k.k./workspace/rubyfuri_app/src/index.js":"2","/Users/k.k./workspace/rubyfuri_app/src/firebase.js":"3","/Users/k.k./workspace/rubyfuri_app/src/App.js":"4"},{"size":362,"mtime":1608255584486,"results":"5","hashOfConfig":"6"},{"size":648,"mtime":1644396584133,"results":"7","hashOfConfig":"6"},{"size":446,"mtime":1644396611596,"results":"8","hashOfConfig":"6"},{"size":28612,"mtime":1644398909275,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i443hy",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/k.k./workspace/rubyfuri_app/src/reportWebVitals.js",[],"/Users/k.k./workspace/rubyfuri_app/src/index.js",[],"/Users/k.k./workspace/rubyfuri_app/src/firebase.js",[],"/Users/k.k./workspace/rubyfuri_app/src/App.js",["19"],"import { useEffect, useState } from 'react';\nimport firebase from './firebase';\nimport { Button, Popup, Header, Grid, Segment, Icon, Modal, Menu } from 'semantic-ui-react'\nimport './App.css';\n\nconst db = firebase.firestore();\n\nconst App = () => {\n  // ステート郡\n  const [open, setOpen] = useState(false);\n  const [activeItem, setActiveItem] = useState('rubyfuriMode')\n  // ルビ振り関連のステート\n  const [ruby1, setRuby1] = useState('');\n  const [ruby2, setRuby2] = useState('');\n  const [ruby3, setRuby3] = useState('');\n  const [ruby4, setRuby4] = useState('');\n  const [ruby5, setRuby5] = useState('');\n  const [ruby6, setRuby6] = useState('');\n  const [ruby7, setRuby7] = useState('');\n  const [ruby8, setRuby8] = useState('');\n  const [kanji, setKanji] = useState('');\n  const [jukuji, setJukuji] = useState('');\n  const [ruby_j, setRuby_j] = useState('');\n  const [logs, setLogs] = useState([]);\n  const [edit, setEdit] = useState(false);\n  // 正規表現関連のステート\n  const [word1, setWord1] = useState('');\n  const [word2, setWord2] = useState('');\n  const [word3, setWord3] = useState('');\n  const [word4, setWord4] = useState('');\n  const [hiragana1, setHiragana1] = useState('');\n  const [hiragana2, setHiragana2] = useState('');\n  const [hiragana3, setHiragana3] = useState('');\n  const [hiragana4, setHiragana4] = useState('');\n\n  // 更新のお知らせの管理と履歴表示の状態監視\n  useEffect(() => {\n    window.addEventListener('mouseover', () => {\n      if (localStorage.getItem('disp_popup') !== 'n3') {\n        setOpen(true)\n        localStorage.setItem('disp_popup', 'n3')\n      };\n    });\n    const unsubscribe = db\n      .collection('logs')\n      .orderBy('createdAt', 'desc')\n      .limit(150)\n      .onSnapshot((querysnapshot) => {\n        const _logs = querysnapshot.docs.map(doc => {\n          return ({\n            logId: doc.id,\n            ...doc.data()\n          });\n        });\n      setLogs(_logs);\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  // 更新メッセージ\n  const updateMessage = \n  `いつもご利用ありがとうございます！　アップデートがあります！\n\n\n  ①　正規表現も作成できるようになりました。\n  　　左上のメニューバーから「正規表現」を押していただくと利用できます。\n  　　（現段階では履歴を保存する機能はありません）\n  \n  ②　その他、新規機能に伴う表記の変更などを行っています。`\n\n  // 履歴アイテム\n  const logItems = logs.map(log => {\n    if (edit) {\n      return (\n        <i id={log.logId}\n          className=\"logList_delete\"\n          onClick={() => deleteItem(log.logId)}\n        >\n          {log.kanji || log.jukuji}\n        </i>\n      )\n    } else {\n      return (\n        <i id={log.logId}\n          className=\"logList\"\n          onClick={() => displayHistory(log)}\n        >\n          {log.kanji || log.jukuji}\n        </i>\n      )\n    }\n  })\n\n  // 履歴を削除する関数\n  const deleteItem = async (id) => {\n    const result = window.confirm(\"この履歴を削除してもよろしいですか？\");\n    if (result) {\n      try {\n        const db = firebase.firestore();\n        await db.collection('logs').doc(id).delete();\n      } catch (error) {\n        console.error(error);\n      };\n    } else {\n      return;\n    };\n  };\n\n  // 履歴タグを表示させる関数\n  const displayHistory = (id) => {\n    if (id.kanji) {\n      setKanji(id.kanji)\n      setRuby1(id.ruby1)\n      setRuby2(id.ruby2)\n      setRuby3(id.ruby3)\n      setRuby4(id.ruby4)\n      setRuby5(id.ruby5)\n      setRuby6(id.ruby6)\n      setRuby7(id.ruby7)\n      setRuby8(id.ruby8)\n      setJukuji(\"\")\n      setRuby_j(\"\")\n    } else if (id.jukuji) {\n      setJukuji(id.jukuji)\n      setRuby_j(id.ruby_j)\n      setKanji('')\n      setRuby1('')\n      setRuby2('')\n      setRuby3('')\n      setRuby4('')\n      setRuby5('')\n      setRuby6('')\n      setRuby7('')\n      setRuby8('')\n    }\n  }\n\n  // 入力された漢字・熟字訓を保存する関数\n  const HistoryLog = async () => {\n    if (kanji) {\n      await db.collection('logs').add({\n        kanji: kanji,\n        ruby1: ruby1,\n        ruby2: ruby2,\n        ruby3: ruby3,\n        ruby4: ruby4,\n        ruby5: ruby5,\n        ruby6: ruby6,\n        ruby7: ruby7,\n        ruby8: ruby8,\n        count: 1,\n        createdAt: new Date(),\n      })\n    } else if (jukuji) {\n      await db.collection('logs').add({\n        jukuji: jukuji,\n        ruby_j: ruby_j,\n        count: 1,\n        createdAt: new Date(),\n      })\n    }\n  }\n\n  const addCount = async (id) => {\n    const increment = (await db.collection(\"logs\").doc(id).get()).data().count + 1\n    console.log(increment)\n    db.collection('logs').doc(id)\n    .set({\n      count: increment,\n      createdAt: new Date()\n    }, {merge: true})\n  }\n\n  // リセットボタンの関数\n  const resetBtn = () => {\n    const existence = logs.some(log => log.kanji === kanji && log.ruby1 === ruby1) || logs.some(log => log.jukuji === jukuji)\n    if (!existence) {\n      HistoryLog()\n    } else {\n      if (kanji) {\n        db.collection('logs')\n        .where(\"kanji\", \"==\", kanji)\n        .get()\n        .then(querySnapshot => {\n          if (querySnapshot.empty) {\n              console.log('結果は空です')\n          } else {\n            querySnapshot.forEach(doc => {\n              addCount(doc.id)\n            })\n          }\n        })\n      } else if (jukuji) {\n        db.collection('logs')\n        .where(\"jukuji\", \"==\", jukuji)\n        .get()\n        .then(querySnapshot => {\n          if (querySnapshot.empty) {\n              console.log('結果は空です')\n          } else {\n            querySnapshot.forEach(doc => {\n              addCount(doc.id)\n            })\n          }\n        })\n      }\n    }\n    setKanji('')\n    setRuby1('')\n    setRuby2('')\n    setRuby3('')\n    setRuby4('')\n    setRuby5('')\n    setRuby6('')\n    setRuby7('')\n    setRuby8('')\n    setJukuji('')\n    setRuby_j('')\n  }\n\n  const RegresetBtn = () => {\n    setWord1('')\n    setWord2('')\n    setWord3('')\n    setWord4('')\n    setHiragana1('')\n    setHiragana2('')\n    setHiragana3('')\n    setHiragana4('')\n  }\n\n  // コピーボタンとその関数\n  const copyToClipboard = async () => {\n    if (activeItem === 'rubyfuriMode') {\n      const copyData = document.getElementsByClassName(\"rubyText\")[0].innerText\n      await navigator.clipboard.writeText(copyData)\n    } else if (activeItem === 'regexMode') {\n      const copyData = document.getElementsByClassName(\"regText\")[0].innerText\n      await navigator.clipboard.writeText(copyData)\n    }\n  }\n  const CopyBtn = () => {\n    let n = Math.random()\n    let message = \"コピーしたよ！\"\n    if (n > 0.95) {\n      message = \"コピーしたよ、いつもおつかれさま\"\n    } else if (n > 0.85) {\n      message = \"コピーしたってばよ！\"\n    } else if (n > 0.75) {\n      message = \"コピーしたにゃ\"\n    } else if (n > 0.5) {\n      message = \"コピーしたなり\"\n    }\n    return (\n      <Popup\n        trigger={<Button onClick={()=> copyToClipboard()}><Icon name='copy outline'/>COPY</Button>}\n        content={message}\n        on='click'\n        style={{\"opacity\":0.8}}\n        inverted\n        position=\"bottom left\"\n        hideOnScroll\n        wide\n      />\n    )\n  }\n\n  // 漢字の文字数カウント\n  const kanjiSplit = kanji.split('')\n  const count = kanjiSplit.length\n\n  // 履歴削除ボタンのコンポーネント\n  const DeleteBtn = () => {\n    if (edit) {\n      const red = {\n        color: \"white\",\n        backgroundColor: \"#cc2200\",\n        border: \"2px solid white\"\n      }\n      return (\n        <Popup\n          trigger={<button\n            className=\"deleteBtn\"\n            style={red}\n            onClick={() => setEdit(false)}>戻る</button>}\n          content='不要な履歴をクリックしてください。確認ダイアログをOKすると削除が完了します。'\n          open\n          style={{\"opacity\":0.8}}\n          inverted\n          position=\"top right\"\n          hideOnScroll\n        />\n      )\n    } else {\n      return (\n        <Popup\n          trigger={<button\n            className=\"deleteBtn\"\n            onClick={() => setEdit(true)}><Icon name='trash alternate outline'/>履歴を削除する</button>}\n          content='履歴を削除できるモードです。'\n          on='hover'\n          style={{\"opacity\":0.8}}\n          inverted\n          position=\"top right\"\n          hideOnScroll\n        />\n      )\n    }\n  }\n\n  // ルビ振り表示コンポーネント\n  const Rubyfuri = () => {\n    if (jukuji) {\n      return (\n        <div>\n          <h3>イメージ</h3>\n          <ruby><rb>{jukuji}</rb><rp>（</rp><rt>{ruby_j}</rt><rp>）</rp></ruby>\n          <br />\n          <h3>タグ</h3>\n          <p className=\"rubyText\">\n            {\"<ruby><rb>\"}{jukuji}{\"</rb><rp>（</rp><rt>\"}{ruby_j}{\"</rt><rp>）</rp></ruby>\"}\n          </p>\n          <CopyBtn/>\n        </div>\n      )\n    } else if (count === 1) {\n      return (\n        <div>\n          <h3>イメージ</h3>\n          <ruby><rb>{kanjiSplit[0]}</rb><rp>（</rp><rt>{ruby1}</rt><rp>）</rp></ruby>\n          <br />\n          <h3>タグ</h3>\n          <p className=\"rubyText\">\n            {\"<ruby><rb>\"}{kanjiSplit[0]}{\"</rb><rp>（</rp><rt>\"}{ruby1}{\"</rt><rp>）</rp></ruby>\"}\n          </p>\n          <CopyBtn/>\n        </div>\n      )\n    } else if (count === 2) {\n      return (\n        <div>\n          <h3>イメージ</h3>\n          <ruby><rb>{kanjiSplit[0]}</rb><rp>（</rp><rt>{ruby1}</rt><rp>）</rp><rb>{kanjiSplit[1]}</rb><rp>（</rp><rt>{ruby2}</rt><rp>）</rp></ruby>\n          <br />\n          <h3>タグ</h3>\n          <p className=\"rubyText\">\n            {\"<ruby><rb>\"}{kanjiSplit[0]}{\"</rb><rp>（</rp><rt>\"}{ruby1}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[1]}{\"</rb><rp>（</rp><rt>\"}{ruby2}{\"</rt><rp>）</rp></ruby>\"}\n          </p>\n          <CopyBtn/>\n        </div>\n      )\n    } else if (count === 3) {\n      return (\n        <div>\n          <h3>イメージ</h3>\n          <ruby><rb>{kanjiSplit[0]}</rb><rp>（</rp><rt>{ruby1}</rt><rp>）</rp><rb>{kanjiSplit[1]}</rb><rp>（</rp><rt>{ruby2}</rt><rp>）</rp><rb>{kanjiSplit[2]}</rb><rp>（</rp><rt>{ruby3}</rt><rp>）</rp></ruby>\n          <br />\n          <h3>タグ</h3>\n          <p className=\"rubyText\">\n            {\"<ruby><rb>\"}{kanjiSplit[0]}{\"</rb><rp>（</rp><rt>\"}{ruby1}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[1]}{\"</rb><rp>（</rp><rt>\"}{ruby2}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[2]}{\"</rb><rp>（</rp><rt>\"}{ruby3}{\"</rt><rp>）</rp></ruby>\"}\n          </p>\n          <CopyBtn/>\n        </div>\n      )\n    } else if (count === 4) {\n      return (\n        <div>\n          <h3>イメージ</h3>\n          <ruby><rb>{kanjiSplit[0]}</rb><rp>（</rp><rt>{ruby1}</rt><rp>）</rp><rb>{kanjiSplit[1]}</rb><rp>（</rp><rt>{ruby2}</rt><rp>）</rp><rb>{kanjiSplit[2]}</rb><rp>（</rp><rt>{ruby3}</rt><rp>）</rp><rb>{kanjiSplit[3]}</rb><rp>（</rp><rt>{ruby4}</rt><rp>）</rp></ruby>\n          <br />\n          <h3>タグ</h3>\n          <p className=\"rubyText\">\n            {\"<ruby><rb>\"}{kanjiSplit[0]}{\"</rb><rp>（</rp><rt>\"}{ruby1}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[1]}{\"</rb><rp>（</rp><rt>\"}{ruby2}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[2]}{\"</rb><rp>（</rp><rt>\"}{ruby3}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[3]}{\"</rb><rp>（</rp><rt>\"}{ruby4}{\"</rt><rp>）</rp></ruby>\"}\n          </p>\n          <CopyBtn/>\n        </div>\n      )\n    } else if (count === 5) {\n      return (\n        <div>\n          <h3>イメージ</h3>\n          <ruby><rb>{kanjiSplit[0]}</rb><rp>（</rp><rt>{ruby1}</rt><rp>）</rp><rb>{kanjiSplit[1]}</rb><rp>（</rp><rt>{ruby2}</rt><rp>）</rp><rb>{kanjiSplit[2]}</rb><rp>（</rp><rt>{ruby3}</rt><rp>）</rp><rb>{kanjiSplit[3]}</rb><rp>（</rp><rt>{ruby4}</rt><rp>）</rp><rb>{kanjiSplit[4]}</rb><rp>（</rp><rt>{ruby5}</rt><rp>）</rp></ruby>\n          <br />\n          <h3>タグ</h3>\n          <p className=\"rubyText\">\n            {\"<ruby><rb>\"}{kanjiSplit[0]}{\"</rb><rp>（</rp><rt>\"}{ruby1}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[1]}{\"</rb><rp>（</rp><rt>\"}{ruby2}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[2]}{\"</rb><rp>（</rp><rt>\"}{ruby3}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[3]}{\"</rb><rp>（</rp><rt>\"}{ruby4}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[4]}{\"</rb><rp>（</rp><rt>\"}{ruby5}{\"</rt><rp>）</rp></ruby>\"}\n          </p>\n          <CopyBtn/>\n        </div>\n      )\n    } else if (count === 6) {\n      return (\n        <div>\n          <h3>イメージ</h3>\n          <ruby><rb>{kanjiSplit[0]}</rb><rp>（</rp><rt>{ruby1}</rt><rp>）</rp><rb>{kanjiSplit[1]}</rb><rp>（</rp><rt>{ruby2}</rt><rp>）</rp><rb>{kanjiSplit[2]}</rb><rp>（</rp><rt>{ruby3}</rt><rp>）</rp><rb>{kanjiSplit[3]}</rb><rp>（</rp><rt>{ruby4}</rt><rp>）</rp><rb>{kanjiSplit[4]}</rb><rp>（</rp><rt>{ruby5}</rt><rp>）</rp><rb>{kanjiSplit[5]}</rb><rp>（</rp><rt>{ruby6}</rt><rp>）</rp></ruby>\n          <br />\n          <h3>タグ</h3>\n          <p className=\"rubyText\">\n            {\"<ruby><rb>\"}{kanjiSplit[0]}{\"</rb><rp>（</rp><rt>\"}{ruby1}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[1]}{\"</rb><rp>（</rp><rt>\"}{ruby2}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[2]}{\"</rb><rp>（</rp><rt>\"}{ruby3}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[3]}{\"</rb><rp>（</rp><rt>\"}{ruby4}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[4]}{\"</rb><rp>（</rp><rt>\"}{ruby5}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[5]}{\"</rb><rp>（</rp><rt>\"}{ruby6}{\"</rt><rp>）</rp></ruby>\"}\n          </p>\n          <CopyBtn/>\n        </div>\n      )\n    } else if (count === 7) {\n      return (\n        <div>\n          <h3>イメージ</h3>\n          <ruby><rb>{kanjiSplit[0]}</rb><rp>（</rp><rt>{ruby1}</rt><rp>）</rp><rb>{kanjiSplit[1]}</rb><rp>（</rp><rt>{ruby2}</rt><rp>）</rp><rb>{kanjiSplit[2]}</rb><rp>（</rp><rt>{ruby3}</rt><rp>）</rp><rb>{kanjiSplit[3]}</rb><rp>（</rp><rt>{ruby4}</rt><rp>）</rp><rb>{kanjiSplit[4]}</rb><rp>（</rp><rt>{ruby5}</rt><rp>）</rp><rb>{kanjiSplit[5]}</rb><rp>（</rp><rt>{ruby6}</rt><rp>）</rp><rb>{kanjiSplit[6]}</rb><rp>（</rp><rt>{ruby7}</rt><rp>）</rp></ruby>\n          <br />\n          <h3>タグ</h3>\n          <p className=\"rubyText\">\n            {\"<ruby><rb>\"}{kanjiSplit[0]}{\"</rb><rp>（</rp><rt>\"}{ruby1}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[1]}{\"</rb><rp>（</rp><rt>\"}{ruby2}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[2]}{\"</rb><rp>（</rp><rt>\"}{ruby3}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[3]}{\"</rb><rp>（</rp><rt>\"}{ruby4}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[4]}{\"</rb><rp>（</rp><rt>\"}{ruby5}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[5]}{\"</rb><rp>（</rp><rt>\"}{ruby6}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[6]}{\"</rb><rp>（</rp><rt>\"}{ruby7}{\"</rt><rp>）</rp></ruby>\"}\n          </p>\n          <CopyBtn/>\n        </div>\n      )\n    } else if (count === 8) {\n      return (\n        <div>\n          <h3>イメージ</h3>\n          <ruby><rb>{kanjiSplit[0]}</rb><rp>（</rp><rt>{ruby1}</rt><rp>）</rp><rb>{kanjiSplit[1]}</rb><rp>（</rp><rt>{ruby2}</rt><rp>）</rp><rb>{kanjiSplit[2]}</rb><rp>（</rp><rt>{ruby3}</rt><rp>）</rp><rb>{kanjiSplit[3]}</rb><rp>（</rp><rt>{ruby4}</rt><rp>）</rp><rb>{kanjiSplit[4]}</rb><rp>（</rp><rt>{ruby5}</rt><rp>）</rp><rb>{kanjiSplit[5]}</rb><rp>（</rp><rt>{ruby6}</rt><rp>）</rp><rb>{kanjiSplit[6]}</rb><rp>（</rp><rt>{ruby7}</rt><rp>）</rp><rb>{kanjiSplit[7]}</rb><rp>（</rp><rt>{ruby8}</rt><rp>）</rp></ruby>\n          <h3>タグ</h3>\n          <p className=\"rubyText\">\n            {\"<ruby><rb>\"}{kanjiSplit[0]}{\"</rb><rp>（</rp><rt>\"}{ruby1}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[1]}{\"</rb><rp>（</rp><rt>\"}{ruby2}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[2]}{\"</rb><rp>（</rp><rt>\"}{ruby3}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[3]}{\"</rb><rp>（</rp><rt>\"}{ruby4}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[4]}{\"</rb><rp>（</rp><rt>\"}{ruby5}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[5]}{\"</rb><rp>（</rp><rt>\"}{ruby6}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[6]}{\"</rb><rp>（</rp><rt>\"}{ruby7}{\"</rt><rp>）</rp><rb>\"}{kanjiSplit[7]}{\"</rb><rp>（</rp><rt>\"}{ruby8}{\"</rt><rp>）</rp></ruby>\"}\n          </p>\n          <CopyBtn/>\n        </div>\n      )\n    } else {\n      return (\n        <div></div>\n      )\n    }\n  }\n\n  // 正規表現の表示コンポーネント\n  const Regexfuri = () => {\n    let reg1 = \"\"\n    let reg2 = \"\"\n    let reg3 = \"\"\n    let reg4 = \"\"\n\n    if (word1 && hiragana1) {\n      reg1 = `(${word1}|${hiragana1})`\n    } else if (word1 && !hiragana1){\n      reg1 = `${word1}`\n    }\n    if (word2 && hiragana2) {\n      reg2 = `(${word2}|${hiragana2})`\n    } else if (word2 && !hiragana2){\n      reg2 = `${word2}`\n    }\n    if (word3 && hiragana3) {\n      reg3 = `(${word3}|${hiragana3})`\n    } else if (word3 && !hiragana3){\n      reg3 = `${word3}`\n    } \n    if (word4 && hiragana4) {\n      reg4 = `(${word4}|${hiragana4})`\n    } else if (word4 && !hiragana4){\n      reg4 = `${word4}`\n    }\n\n    if  (reg1&&reg2&&reg3&&reg4) {\n      return (\n        <div>\n          <h3 className=\"regText\">{\"^\"}{reg1}{reg2}{reg3}{reg4}{\"$\"}</h3>\n          <CopyBtn/>\n        </div>\n      )\n    } else if (reg1&&reg2&&reg3) {\n      return (\n        <div>\n          <h3 className=\"regText\">{\"^\"}{reg1}{reg2}{reg3}{\"$\"}</h3>\n          <CopyBtn/>\n        </div>\n      )\n    } else if (reg1&&reg2) {\n      return (\n        <div>\n          <h3 className=\"regText\">{\"^\"}{reg1}{reg2}{\"$\"}</h3>\n          <CopyBtn/>\n        </div>\n      ) \n    } else if (reg1) {\n      return (\n        <div>\n          <h3 className=\"regText\">{\"^\"}{reg1}{\"$\"}</h3>\n          <CopyBtn/>\n        </div>\n      )\n    } else {\n      return (\n        <div></div>\n      )\n    }\n  }\n\n  // お知らせモーダル\n  const MessageModal = () => {\n    return (\n      <Modal\n        closeOnDimmerClick={false}\n        basic\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n        open={open}\n        size='small'\n        >\n        <Header icon>\n          <Icon name='info circle' />\n          更新のお知らせ\n        </Header>\n        <Modal.Content>\n          <div className=\"messageModal\">{updateMessage}</div>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color='green' inverted onClick={() => setOpen(false)}>\n            <Icon name='checkmark' /> 了解\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    )\n  }\n\n  // 履歴削除ボタン（秘密）\n  const deleteHistory = async () => {\n    let dt = new Date();\n    dt.setMonth(dt.getMonth()-1);\n    try {\n      const query = await db.collection(\"logs\").where(\"createdAt\", \"<\", dt).get();\n      query.docs.forEach(async doc => {\n        await doc.ref.delete();\n      });\n      alert(\"done!\")\n    } catch (error) {\n      console.error(error);\n    };\n  }\n\n  // ヘッダー\n  const Head = () => {\n    return (\n      <div className=\"title\">\n        {/* <button onClick={()=>deleteHistory()}>delete</button> */}\n        <Menu inverted secondary>\n        <Menu.Header as='h1'>Ruby furifuri 2</Menu.Header>\n        </Menu>\n        <Menu inverted secondary>\n          <Menu.Item\n            name='ルビ'\n            active={activeItem === 'rubyfuriMode'}\n            onClick={()=> setActiveItem('rubyfuriMode')}\n          />\n          <Menu.Item\n            name='正規表現'\n            active={activeItem === 'regexMode'}\n            onClick={()=> setActiveItem('regexMode')}\n          />\n          <Menu.Item position='right'>ver 2.1.1</Menu.Item>\n        </Menu>\n      </div>\n    )\n  }\n\n  // 基本的なレンダー部分\n  if (activeItem === 'rubyfuriMode') {\n    return (\n      <div className=\"App\">\n        <MessageModal/>\n        <Head/>\n\n        <div className=\"contents\">\n          <Segment>\n            <Header as='h2' color='grey'>\n              <Icon name='rocket'/>\n              <Header.Content>入力欄</Header.Content>\n            </Header>\n            <Grid columns={2} stackable divided textAlign='center'>\n              <Grid.Column>\n                <div className=\"form\">\n                  <input\n                    className=\"kanji\"\n                    value={kanji}\n                    placeholder=\"漢字を入力\"\n                    autoFocus=\"true\"\n                    onChange={(e) => {setKanji(e.target.value)}}\n                  ></input><br />\n                  <input\n                    className=\"ruby\"\n                    value={ruby1}\n                    placeholder=\"ルビ①\"\n                    onChange={(e) => {setRuby1(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"ruby\"\n                    value={ruby2}\n                    placeholder=\"ルビ②\"\n                    onChange={(e) => {setRuby2(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"ruby\"\n                    value={ruby3}\n                    placeholder=\"ルビ③\"\n                    onChange={(e) => {setRuby3(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"ruby\"\n                    value={ruby4}\n                    placeholder=\"ルビ④\"\n                    onChange={(e) => {setRuby4(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"ruby\"\n                    value={ruby5}\n                    placeholder=\"ルビ⑤\"\n                    onChange={(e) => {setRuby5(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"ruby\"\n                    value={ruby6}\n                    placeholder=\"ルビ⑥\"\n                    onChange={(e) => {setRuby6(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"ruby\"\n                    value={ruby7}\n                    placeholder=\"ルビ⑦\"\n                    onChange={(e) => {setRuby7(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"ruby\"\n                    value={ruby8}\n                    placeholder=\"ルビ⑧\"\n                    onChange={(e) => {setRuby8(e.target.value)}}\n                  ></input>\n                </div>\n              </Grid.Column>\n              <Grid.Column>\n                <div className=\"form\">\n                  <input\n                    className=\"jukuji\"\n                    value={jukuji}\n                    placeholder=\"熟字訓を入力\"\n                    onChange={(e) => {setJukuji(e.target.value)}}\n                  ></input><br />\n                  <input\n                    className=\"ruby_j\"\n                    value={ruby_j}\n                    placeholder=\"ルビ\"\n                    onChange={(e) => {setRuby_j(e.target.value)}}\n                  ></input>\n                </div>              \n              </Grid.Column>\n            </Grid>\n            <div><Popup\n                trigger={<button className=\"resetBtn\" onClick={resetBtn}>RESET</button>}\n                content='入力欄がリセットされると同時に履歴欄に追加されます。（すでにあるものは追加されません）'\n                on='hover'\n                style={{\"opacity\":0.8}}\n                inverted\n                position=\"bottom right\"\n                hideOnScroll\n                wide\n              /></div>\n          </Segment>\n          \n          <Segment>\n            <Header as='h2'color='grey'>\n              <Icon name='code'/>\n              <Header.Content>ルビタグ表示欄</Header.Content>\n            </Header>\n            <Grid>\n              <Grid.Column>\n                <div className=\"rubyContent\">\n                  <Rubyfuri />\n                </div>\n              </Grid.Column>\n            </Grid>\n          </Segment>\n          \n          <Segment>\n            <Header as='h2'color='grey'>\n              <DeleteBtn/>\n              <Icon name='history'/>\n              <Header.Content>最近の履歴</Header.Content>\n            </Header>\n            <Grid>\n              <Grid.Column>\n                <div className=\"historyContent\">\n                  {logItems}\n                </div>\n              </Grid.Column>\n            </Grid>\n          </Segment>\n        </div>\n      </div>\n      \n    )\n  } else if (activeItem === 'regexMode') {\n    return (\n      <div className=\"App\">\n        <MessageModal/>        \n        <Head/>\n        \n        <div className=\"contents\">\n          <Segment>\n            <Header as='h2' color='grey'>\n              <Icon name='rocket'/>\n              <Header.Content>入力欄</Header.Content>\n            </Header>\n            <Grid columns={4} divided>\n              <Grid.Row>\n                <Grid.Column>\n                  <h3>①</h3>\n                  <input\n                    className=\"regexInput\"\n                    value={word1}\n                    placeholder=\"(例) 村\"\n                    autoFocus=\"true\"\n                    onChange={(e) => {setWord1(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"regexInput\"\n                    value={hiragana1}\n                    placeholder=\"(例) むら\"\n                    onChange={(e) => {setHiragana1(e.target.value)}}\n                  ></input>\n                </Grid.Column>\n                <Grid.Column>\n                  <h3>②</h3>\n                  <input\n                    className=\"regexInput\"\n                    value={word2}\n                    placeholder=\"(例) 田\"\n                    onChange={(e) => {setWord2(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"regexInput\"\n                    value={hiragana2}\n                    placeholder=\"(例) た\"\n                    onChange={(e) => {setHiragana2(e.target.value)}}\n                  ></input>\n                </Grid.Column>\n                <Grid.Column>\n                  <h3>③</h3>\n                  <input\n                    className=\"regexInput\"\n                    value={word3}\n                    placeholder=\"(例) さん\"\n                    onChange={(e) => {setWord3(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"regexInput\"\n                    value={hiragana3}\n                    placeholder=\"\"\n                    onChange={(e) => {setHiragana3(e.target.value)}}\n                  ></input>\n                </Grid.Column>\n                <Grid.Column>\n                  <h3>④</h3>\n                  <input\n                    className=\"regexInput\"\n                    value={word4}\n                    placeholder=\"\"\n                    onChange={(e) => {setWord4(e.target.value)}}\n                  ></input>\n                  <input\n                    className=\"regexInput\"\n                    value={hiragana4}\n                    placeholder=\"\"\n                    onChange={(e) => {setHiragana4(e.target.value)}}\n                  ></input>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n            <div><Popup\n                trigger={<button className=\"resetBtn\" onClick={RegresetBtn}>RESET</button>}\n                content='入力欄がリセットされます。（履歴追加は未対応）'\n                on='hover'\n                style={{\"opacity\":0.8}}\n                inverted\n                position=\"bottom right\"\n                hideOnScroll\n                wide\n              /></div>\n          </Segment>\n\n          <Segment>\n            <Header as='h2'color='grey'>\n              <Icon name='code'/>\n              <Header.Content>正規表現表示欄</Header.Content>\n            </Header>\n            <br/>\n            <Grid>\n              <Grid.Column>\n                <div className=\"rubyContent\">\n                  <Regexfuri/>\n                </div>\n              </Grid.Column>\n            </Grid>\n          </Segment>\n\n          <Segment>\n            <Header as='h2'color='grey'>\n              <Icon name='key'/>\n              <Header.Content>使い方</Header.Content>\n            </Header>\n            <Grid>\n              <Grid.Column>\n                <div style={{\"padding\": \"2%\"}}>\n                （例）「村田さん」の正規表現を作りたい場合<br/><br/>\n                ① の上部に「村」、下部に「むら」のように入力していきます。<br/>「さん」のように正規表現不要なものは、上部にだけ入力すればOKです。\n                </div>\n              </Grid.Column>\n            </Grid>\n          </Segment>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n",{"ruleId":"20","severity":1,"message":"21","line":529,"column":9,"nodeType":"22","messageId":"23","endLine":529,"endColumn":22},"no-unused-vars","'deleteHistory' is assigned a value but never used.","Identifier","unusedVar"]